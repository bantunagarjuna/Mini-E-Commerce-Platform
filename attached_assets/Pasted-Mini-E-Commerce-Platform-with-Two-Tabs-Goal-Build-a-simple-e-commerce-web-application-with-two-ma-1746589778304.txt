Mini E-Commerce Platform with Two Tabs
Goal:
Build a simple e-commerce web application with two main tabs — one for submitting products, and one for viewing submitted products, with an optional smart search feature.

Platform Overview:
You are building a basic e-commerce-style platform where users can:
Add their products (for example: chairs, tables, desktops, phones, or anything ...)
View their submitted products in a clean layout
Optionally search for products using smart contextual search(good to have )
Tech Stack to this project:
Frontend: React.jsor Next.jswith Tailwind CSS
Backend: Node.js with Express
Database: PostgreSQL
Version Control: GitHub (required)
AI (optional): Keyword matching or OpenAI embeddings for semantic search

Web App Layout:
The app should have two main tabs:

Tab 1: Product Submission
Name: Product Submission
Allow the user to enter:
   Product Name
   Price
   Description
   Image URL (optional)
On submit ->send the data to the backend
Save the data to a PostgreSQL database

Tab 2: My Products
Name: My Products

    Show a list of all submitted products
    Fetch the products from the backend
     Display each product in a card layout: show the name, price, description, and image
     Newly added products should be displayed immediately, either with dynamic upda

Optional Feature: Search or Contextual Search
Simple Search
In the 'My Products' tab, add a simple search box at the top to allow users to search for products by name or keywords. For example, typing 'chair' should return any product with 'chair' in its name or description.
                                                       OR
Contextual Search 
What is Contextual Search?
Contextual search tries to understand the meaning of the user input, not just the exact words.

Example:
A product in the database is "Wooden Sofa"
If the user types "Need something to sit with my family", the app should return the sofa because it matches the intent or context
If AI tools like OpenAI are not available, you can simulate this by:
Breaking the user input into keywords
Matching those keywords with the product descriptions
Submission Guidelines:
Please follow the steps below to ensure your assignment is complete and easy to review:
Push your code to a public GitHub repository
Make sure the repo name is relevant to the project
Include a README.md file in the root directory with the following:
   Setup Instructions – How to run the project locally (frontend & backend)
   What's Working – Briefly list the features you've implemented